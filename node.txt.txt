What is Backend?
The backend is the behind-the-scenes part of a website or app.
It handles data processing, logic, and communication with the database.
What is a Server?
A server is a computer or software that stores, processes, and delivers data to users.
When you visit a website, your browser requests data from a server.
💡 Example:

When you open Facebook, your phone sends a request to Facebook’s server.
The server sends back your profile, posts, and messages.

What is Node.js?
Node.js is a backend runtime environment that allows JavaScript to run outside the browser, usually on a server.

💡 Simple Explanation:

Normally, JavaScript runs in web browsers (Chrome, Firefox).
Node.js lets you use JavaScript to build server-side applications.
It’s fast, scalable, and non-blocking, making it great for real-time apps.

Why Use Node.js?
✅ Uses JavaScript for backend – Same language for frontend & backend.
✅ Fast & Efficient – Uses the V8 engine (from Google Chrome).
✅ Handles Multiple Requests – Uses non-blocking I/O (doesn’t wait for tasks to complete).
✅ Has a Huge Library – Comes with npm (Node Package Manager) to install packages easily.

Example: If a user requests data from a server, Node.js doesn’t wait for the database to respond—it 
continues handling other requests.
44Creating a Simple Server with Node.js

const http = require("http");

const server = http.createServer((req, res) => {
  res.writeHead(200, { "Content-Type": "text/plain" });
  res.end("Hello, World!");
});

server.listen(3000, () => {
  console.log("Server running at http://localhost:3000");
});
Node js module system
enabling developers to organize code into reusable and maintainable components.
It is based on the CommonJS module specification, which uses require and module.exports to load and export modules.
 Node.js also supports ECMAScript Modules (ESM) starting from Node.js 

1. CommonJS Modules -.js
CommonJS is the default module system in Node.js. It uses the following keywords:

require(): Used to import modules.

module.exports or exports: Used to export functionality from a module.
Math.js-
// Define functions
const add = (a, b) => a + b;
const subtract = (a, b) => a - b;

// Export functions
module.exports = { add, subtract };

app.js
// Import the module
const math = require('./math');

// Use the module's functions
console.log(math.add(5, 3)); // Output: 8
console.log(math.subtract(5, 3)); // Output: 2

2. ECMAScript Modules (ESM) -.mjs or "type": "module"
ECMAScript Modules (ESM) is the standard module system in JavaScript, using import and export syntax. Node.js supports ESM starting from version 12+.44

Theree are 3 types
---------------------

 1.Core Modules
Node.js comes with built-in core modules that can be imported without installation. Examples include:

fs: File system operations.
http: Creating HTTP servers.
path: Handling file paths.
os: Operating system utilities.
readline

2. Third-Party Modules
Third-party modules are installed via npm (Node Package Manager) and can be imported using require() or import.
eg.chalk,axios,formidable,validator
3.custom modules-self created

 What are Global npm Modules?
npm (Node Package Manager) allows installing packages either:
✅ Locally – Used only in the current project (node_modules folder).
✅ Globally – Used system-wide, accessible in any project.

What is Nodemon?
Nodemon is a global npm module that automatically restarts your Node.js server whenever you make changes to your code.

📌 Why Use Nodemon?
✔ No need to manually restart the server after every code change.
✔ Speeds up development

12/02/2025
----------
 accessng inputs which is given in terminal
In Node.js, you can access inputs provided in the terminal using the process object, which is a global object that provides information about 

and control over the current Node.js process
Command Line Arguments (CLA)
Command Line Arguments are values passed to a program when it is executed via the terminal or command prompt. 
These arguments allow users to provide inputs dynamically instead of hardcoding them in the script.

How Command Line Arguments Work?
When you run a program, you can pass arguments after the program name.
These arguments are received by the script and processed.
In Node.js, the arguments can be accessed using process.argv.

Command-Line Arguments (process.argv):

The process.argv property returns an array containing the command-line arguments passed when the Node.js process was launched.

The first element (process.argv[0]) is the path to the Node.js executable.

The second element (process.argv[1]) is the path to the JavaScript file being executed.

Subsequent elements (process.argv[2], process.argv[3], etc.) are the additional command-line arguments provided by the user.
Run in terminal: node script.js arg1 arg2
When dealing with command-line arguments in the format --title="my title" (or similar key-value pairs), you can parse them manually using process.argv,
 but it's much easier and cleaner to use a library like yargs or minimist. 
These libraries handle the parsing of such arguments automatically.
Using yargs (Recommended)
yargs is a powerful library for parsing command-line arguments. It automatically handles key-value pairs like --title="my title".

npm install yargs

yarg.parse()-execute command
In yargs, the .parse() method is used to parse the command-line arguments and return the parsed arguments as an object.
 It is an alternative to accessing the parsed arguments via the .argv property.
--------------------------------------------------------------------------------------------------------------------------------
JSON (JavaScript Object Notation)
JSON (JavaScript Object Notation) is a lightweight data interchange format that is easy for humans to read and write, and easy for machines to parse and generate. 
It is widely used for transmitting data in web applications (e.g., between a server and a client).
Objects: Unordered collections of key-value pairs enclosed in {}.

Keys must be strings (enclosed in double quotes "").

Values can be strings, numbers, objects, arrays, true, false, or null.
The JSON.stringify() method converts a JavaScript object or array into a JSON string.
The JSON.parse() method converts a JSON string into a JavaScript object.
toString() in JavaScript
The .toString() method is used to convert data types (numbers, arrays, objects, etc.) into a string representation.
const num = 123;
console.log(num.toString()); // Output: "123"

Node.js fs (File System) Module
------------------------------------------
The fs module in Node.js is used to handle file operations like reading, writing, updating, deleting, and more.

Writing to Files
----------------

Reading Files

Synchronous (fs.readFileSync)

const data = fs.readFileSync('file.txt', 'utf8');
console.log(data);

Blocks execution until the file is read.
Returns the file content.

Asynchronous (fs.readFile)

fs.readFile('file.txt', 'utf8', (err, data) => {
  if (err) throw err;
  console.log(data);
});
Does not block execution.
Uses a callback function to handle the file data

1.Synchronous (fs.writeFileSync)

fs.writeFileSync('file.txt', 'Hello, World!');
console.log('File written successfully');

Blocks execution until the file is written.
2.Asynchronous (fs.writeFile)

fs.writeFile('file.txt', 'Hello, Async!', (err) => {
  if (err) throw err;
  console.log('File written successfully');
});
Does not block execution.

3.Appending to Files
Synchronous (fs.appendFileSync)

fs.appendFileSync('file.txt', '\nAppended text');
Asynchronous (fs.appendFile)

fs.appendFile('file.txt', '\nAsync Appended text', (err) => {
  if (err) throw err;
  console.log('Text appended');
});

4.Deleting Files

Synchronous (fs.unlinkSync)

fs.unlinkSync('file.txt');
console.log('File deleted');
Asynchronous (fs.unlink)

fs.unlink('file.txt', (err) => {
  if (err) throw err;
  console.log('File deleted');
});
5.Checking if a File Exists

if (fs.existsSync('file.txt')) {
  console.log('File exists');
} else {
  console.log('File does not exist');
}
Returns true or false.

6.Creating & Removing Directories

Create Directory

fs.mkdirSync('newDir'); // Synchronous
fs.mkdir('newDir', (err) => { if (err) throw err; }); // Asynchronous

Remove Directory

fs.rmdirSync('newDir'); // Synchronous
fs.rmdir('newDir', (err) => { if (err) throw err; }); // Asynchronous

7.Renaming Files

fs.renameSync('old.txt', 'new.txt'); // Synchronous
fs.rename('old.txt', 'new.txt', (err) => { if (err) throw err; }); // Asynchronous


Arrow Function in JavaScript
-------------------------------
An arrow function (=>) is a shorter and cleaner way to write function expressions in JavaScript. 
It was introduced in ES6 and is often used for callbacks and shorter functions.
const add = (a, b) => a + b;
console.log(add(5, 3)); // Output: 8

Synchronous Execution (Blocking)
*Synchronous operations execute sequentially, meaning the program waits for the current task to complete 
before moving to the next one.
*If a task takes a long time (e.g., reading a large file), it blocks the execution of subsequent 
code, slowing down the program.

Asynchronous Execution (Non-Blocking)
Asynchronous operations do not wait for a task to complete before moving to the next one.
Instead, they delegate tasks (such as reading a file or making an API request) and continue executing other code.
When the task finishes, a callback function or promise handles the result


call stack,queue,webapi,event loop
-------------------------------------
Node.js (Step-by-Step Explanation)
Node.js follows an asynchronous, non-blocking architecture, which makes it efficient for handling multiple operations without waiting for one to complete before moving to the next. This is achieved using:

Call Stack (Executes code)
Web APIs (Handles async tasks)
Callback Queue (Stores completed async tasks)
Event Loop (Moves tasks from queue to stack)

Step-by-Step Execution in Node.js
1️⃣ Call Stack (Execution Area)
The call stack is where Node.js executes functions synchronously (one at a time).
It follows LIFO (Last In, First Out).
2️⃣ Web API (Handles Asynchronous Tasks)
When Node.js encounters asynchronous tasks (e.g., setTimeout, fetch, fs.readFile), it offloads them to the Web API.
The Web API handles these tasks separately (without blocking the call stack).
3️⃣ Callback Queue (Waiting Area)
Once the Web API completes an async task, its callback function moves to the Callback Queue.
4️⃣ Event Loop (Traffic Controller 🚦)
The Event Loop continuously checks:
Is the Call Stack empty?
Are there pending callbacks in the Callback Queue?
If yes, it moves callbacks from the queue to the stack for execution.


http methods
--------------
In Node.js, HTTP methods are used to perform CRUD (Create, Read, Update, Delete) operations on a server.

 These methods are commonly handled using frameworks like Express.js.
 GET – Retrieves data from the server.
 POST – Sends data to the server to create a resource,used to send data to the server.
 PUT – Updates an existing resource completely.
 PATCH – Partially updates an existing resource.
 DELETE – Removes a resource from the server.


http requests 
------------
In Node.js, you can make HTTP requests using the built-in http or https modules. However, for simplicity and additional features, 
many developers prefer using third-party libraries like axios or node-fetch

------------------------------------------------------------------------------------------------------------------

1.Get requests
----------------
1.using built in http Module
-----------------------------
The http module is a built-in Node.js module that provides functionality to create HTTP servers and make HTTP requests.
Here, we import it to use its http.request() method for making HTTP requests.

1.Using the Built-in http Module
The http module can be used to make HTTP requests.

const http = require('http');

const options = {
  hostname: 'jsonplaceholder.typicode.com',
  path: '/posts/1',
  method: 'GET',
};

const req = http.request(options, (res) => {
  let data = '';

  // Collect data chunks
  res.on('data', (chunk) => {
    data += chunk;
  });

  // Handle the end of the response
  res.on('end', () => {
    console.log('Response:', JSON.parse(data));
  });
});

// Handle errors
req.on('error', (error) => {
  console.error('Error:', error);
});

// End the request
req.end();
*Here, we import it to use its http.request() method for making HTTP requests.

*The options object specifies the details of the HTTP request:

hostname: The domain name or IP address of the server you're making the request to (in this case, jsonplaceholder.typicode.com).

path: The specific resource you're requesting (here, /posts/1 refers to the post with ID 1).

method: The HTTP method to use (in this case, GET to retrieve data).
*http.request() is used to create an HTTP request. It takes two arguments:

options: The configuration object for the request (defined earlier).

A callback function: This function is called when the server responds to the request. The callback receives the response object (res).
*Inside the callback:

let data = '';: A variable to accumulate the response data.

res.on('data', (chunk) => { data += chunk; });: The data event is emitted whenever a chunk of data is received from the server. We append each chunk to the data variable.

res.on('end', () => { console.log('Response:', JSON.parse(data)); });: The end event is emitted when the entire response has been received. At this point, we log the complete response

* after parsing it from JSON to a JavaScript object using JSON.parse().
*The error event is emitted if the request fails (e.g., due to network issues or an invalid hostname).

We log the error to the console using console.error().
*req.end() finalizes the request. It must be called to send the request to the server.

If you were sending data in the request body (e.g., for a POST request), 
you would pass the data as an argument to req.end().

2Using the Built-in https Module for HTTPS Requests
For HTTPS requests, use the https module instead of http.

3. Using axios (Third-Party Library)
axios is a popular promise-based HTTP client for Node.js and the browser.
const axios = require('axios');

axios.get('https://jsonplaceholder.typicode.com/posts/1')
  .then((response) => {
    console.log('Response:', response.data);
  })
  .catch((error) => {
    console.error('Error:', error);
  });

*axios is a popular JavaScript library used to make HTTP requests (e.g., GET, POST, PUT, DELETE) from both the browser and Node.js.
*The axios.get() method is used to send a GET request to the specified URL.
*The .then() method is used to handle the successful response from the API.

The response object contains details about the HTTP response, such as:

response.data: The actual data returned by the API (in this case, a JSON object representing the post with ID 1).

response.status: The HTTP status code (e.g., 200 for success).

response.headers: The HTTP headers returned by the server.
The .catch() method is used to handle any errors that occur during the request.

If the request fails (e.g., due to a network error, invalid URL, or server issue), the error object will contain details about the error.
why use axios
--------------Promise-based: axios uses promises, making it easier to handle asynchronous operations.

Automatic JSON parsing: axios automatically parses JSON responses, so you don't need to manually convert the response to JSON.

4. Using Fetch API (In Browser or Node.js)
fetch("https://jsonplaceholder.typicode.com/posts")
  .then(response => response.json()) // Convert response to JSON
  .then(data => console.log(data)) // Log the data
  .catch(error => console.error("Error:", error));

*Fetches all posts from the API.
Converts the response to JSON.
Prints the list of posts.

----------------------------------------------------------------------------------------------------------------
POST Request (Sending Data)
A POST request is used to send data to the server.
----------------------------------------------------------------------------------------------------------
✅ Common HTTP Status Codes
2xx (Success)

200 OK → Request successful
201 Created → Resource created (used in POST)
204 No Content → Success, but no response body (used in DELETE)
4xx (Client Errors)

400 Bad Request → Invalid request from client
401 Unauthorized → Authentication required
403 Forbidden → No permission to access
404 Not Found → Resource not found
5xx (Server Errors)

500 Internal Server Error → General server failure
502 Bad Gateway → Server received an invalid response from upstream
503 Service Unavailable → Server is down or overloaded


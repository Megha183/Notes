What is Backend?
The backend is the behind-the-scenes part of a website or app.
It handles data processing, logic, and communication with the database.
What is a Server?
A server is a computer or software that stores, processes, and delivers data to users.
When you visit a website, your browser requests data from a server.
ðŸ’¡ Example:

When you open Facebook, your phone sends a request to Facebookâ€™s server.
The server sends back your profile, posts, and messages.

What is Node.js?
Node.js is a backend runtime environment that allows JavaScript to run outside the browser, usually on a server.

ðŸ’¡ Simple Explanation:

Normally, JavaScript runs in web browsers (Chrome, Firefox).
Node.js lets you use JavaScript to build server-side applications.
Itâ€™s fast, scalable, and non-blocking, making it great for real-time apps.

Why Use Node.js?
âœ… Uses JavaScript for backend â€“ Same language for frontend & backend.
âœ… Fast & Efficient â€“ Uses the V8 engine (from Google Chrome).
âœ… Handles Multiple Requests â€“ Uses non-blocking I/O (doesnâ€™t wait for tasks to complete).
âœ… Has a Huge Library â€“ Comes with npm (Node Package Manager) to install packages easily.

Example: If a user requests data from a server, Node.js doesnâ€™t wait for the database to respondâ€”it continues handling other requests.
44Creating a Simple Server with Node.js

const http = require("http");

const server = http.createServer((req, res) => {
  res.writeHead(200, { "Content-Type": "text/plain" });
  res.end("Hello, World!");
});

server.listen(3000, () => {
  console.log("Server running at http://localhost:3000");
});
Node js module system
enabling developers to organize code into reusable and maintainable components.
It is based on the CommonJS module specification, which uses require and module.exports to load and export modules.
 Node.js also supports ECMAScript Modules (ESM) starting from Node.js 

1. CommonJS Modules -.js
CommonJS is the default module system in Node.js. It uses the following keywords:

require(): Used to import modules.

module.exports or exports: Used to export functionality from a module.
Math.js-
// Define functions
const add = (a, b) => a + b;
const subtract = (a, b) => a - b;

// Export functions
module.exports = { add, subtract };

app.js
// Import the module
const math = require('./math');

// Use the module's functions
console.log(math.add(5, 3)); // Output: 8
console.log(math.subtract(5, 3)); // Output: 2

2. ECMAScript Modules (ESM) -.mjs or "type": "module"
ECMAScript Modules (ESM) is the standard module system in JavaScript, using import and export syntax. Node.js supports ESM starting from version 12+.44

Theree are 3 types
---------------------

 1.Core Modules
Node.js comes with built-in core modules that can be imported without installation. Examples include:

fs: File system operations.
http: Creating HTTP servers.
path: Handling file paths.
os: Operating system utilities.
readline

2. Third-Party Modules
Third-party modules are installed via npm (Node Package Manager) and can be imported using require() or import.
eg.chalk,axios,formidable,validator
3.custom modules-self created

 What are Global npm Modules?
npm (Node Package Manager) allows installing packages either:
âœ… Locally â€“ Used only in the current project (node_modules folder).
âœ… Globally â€“ Used system-wide, accessible in any project.

What is Nodemon?
Nodemon is a global npm module that automatically restarts your Node.js server whenever you make changes to your code.

ðŸ“Œ Why Use Nodemon?
âœ” No need to manually restart the server after every code change.
âœ” Speeds up development

12/02/2025
----------
 accessng inputs which is given in terminal
In Node.js, you can access inputs provided in the terminal using the process object, which is a global object that provides information about 

and control over the current Node.js process
Command Line Arguments (CLA)
Command Line Arguments are values passed to a program when it is executed via the terminal or command prompt. 
These arguments allow users to provide inputs dynamically instead of hardcoding them in the script.

How Command Line Arguments Work?
When you run a program, you can pass arguments after the program name.
These arguments are received by the script and processed.
In Node.js, the arguments can be accessed using process.argv.

Command-Line Arguments (process.argv):

The process.argv property returns an array containing the command-line arguments passed when the Node.js process was launched.

The first element (process.argv[0]) is the path to the Node.js executable.

The second element (process.argv[1]) is the path to the JavaScript file being executed.

Subsequent elements (process.argv[2], process.argv[3], etc.) are the additional command-line arguments provided by the user.
Run in terminal: node script.js arg1 arg2
When dealing with command-line arguments in the format --title="my title" (or similar key-value pairs), you can parse them manually using process.argv,
 but it's much easier and cleaner to use a library like yargs or minimist. 
These libraries handle the parsing of such arguments automatically.
Using yargs (Recommended)
yargs is a powerful library for parsing command-line arguments. It automatically handles key-value pairs like --title="my title".

npm install yargs

yarg.parse()-execute command
In yargs, the .parse() method is used to parse the command-line arguments and return the parsed arguments as an object.
 It is an alternative to accessing the parsed arguments via the .argv property.
--------------------------------------------------------------------------------------------------------------------------------
JSON (JavaScript Object Notation)
JSON (JavaScript Object Notation) is a lightweight data interchange format that is easy for humans to read and write, and easy for machines to parse and generate. 
It is widely used for transmitting data in web applications (e.g., between a server and a client).
Objects: Unordered collections of key-value pairs enclosed in {}.

Keys must be strings (enclosed in double quotes "").

Values can be strings, numbers, objects, arrays, true, false, or null.
The JSON.stringify() method converts a JavaScript object or array into a JSON string.
The JSON.parse() method converts a JSON string into a JavaScript object.
toString() in JavaScript
The .toString() method is used to convert data types (numbers, arrays, objects, etc.) into a string representation.
const num = 123;
console.log(num.toString()); // Output: "123"

Node.js fs (File System) Module
------------------------------------------
The fs module in Node.js is used to handle file operations like reading, writing, updating, deleting, and more.

Writing to Files
----------------

Reading Files

Synchronous (fs.readFileSync)

const data = fs.readFileSync('file.txt', 'utf8');
console.log(data);

Blocks execution until the file is read.
Returns the file content.

Asynchronous (fs.readFile)

fs.readFile('file.txt', 'utf8', (err, data) => {
  if (err) throw err;
  console.log(data);
});
Does not block execution.
Uses a callback function to handle the file data

1.Synchronous (fs.writeFileSync)

fs.writeFileSync('file.txt', 'Hello, World!');
console.log('File written successfully');

Blocks execution until the file is written.
2.Asynchronous (fs.writeFile)

fs.writeFile('file.txt', 'Hello, Async!', (err) => {
  if (err) throw err;
  console.log('File written successfully');
});
Does not block execution.

3.Appending to Files
Synchronous (fs.appendFileSync)

fs.appendFileSync('file.txt', '\nAppended text');
Asynchronous (fs.appendFile)

fs.appendFile('file.txt', '\nAsync Appended text', (err) => {
  if (err) throw err;
  console.log('Text appended');
});

4.Deleting Files

Synchronous (fs.unlinkSync)

fs.unlinkSync('file.txt');
console.log('File deleted');
Asynchronous (fs.unlink)

fs.unlink('file.txt', (err) => {
  if (err) throw err;
  console.log('File deleted');
});
5.Checking if a File Exists

if (fs.existsSync('file.txt')) {
  console.log('File exists');
} else {
  console.log('File does not exist');
}
Returns true or false.

6.Creating & Removing Directories

Create Directory

fs.mkdirSync('newDir'); // Synchronous
fs.mkdir('newDir', (err) => { if (err) throw err; }); // Asynchronous

Remove Directory

fs.rmdirSync('newDir'); // Synchronous
fs.rmdir('newDir', (err) => { if (err) throw err; }); // Asynchronous

7.Renaming Files

fs.renameSync('old.txt', 'new.txt'); // Synchronous
fs.rename('old.txt', 'new.txt', (err) => { if (err) throw err; }); // Asynchronous


Arrow Function in JavaScript
-------------------------------
An arrow function (=>) is a shorter and cleaner way to write function expressions in JavaScript. 
It was introduced in ES6 and is often used for callbacks and shorter functions.
const add = (a, b) => a + b;
console.log(add(5, 3)); // Output: 8

